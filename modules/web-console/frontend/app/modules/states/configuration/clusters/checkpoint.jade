//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include ../../../../../app/helpers/jade/mixins.jade

-var form = 'checkpoint'
-var model = 'backupItem.checkpointSpi'
-var credentialsModel = 'checkpoint.S3.awsCredentials'
-var clientCfgModel = 'checkpoint.S3.clientConfiguration'
-var clientRetryModel = clientCfgModel + '.retryPolicy'
-var checkpointFs = 'checkpoint.kind === "FS"'
-var checkpointCache = 'checkpoint.kind === "Cache"'
-var checkpointS3 = 'checkpoint.kind === "S3"'
-var checkpointS3Path = 'checkpoint.kind === "S3" && checkpoint.S3.awsCredentials.kind === "Properties"'
-var checkpointS3Custom = 'checkpoint.kind === "S3" && checkpoint.S3.awsCredentials.kind === "Custom"'
-var checkpointJDBC = 'checkpoint.kind === "JDBC"'
-var checkpointCustom = 'checkpoint.kind === "Custom"'

.panel.panel-default(ng-form=form novalidate)
    .panel-heading(bs-collapse-toggle ng-click='ui.loadPanel("#{form}")')
        ignite-form-panel-chevron
        label Checkpointing
        ignite-form-field-tooltip.tipLabel
            | Checkpointing provides an ability to save an intermediate job state#[br]
            | #[a(href="http://apacheignite.gridgain.org/docs/checkpointing" target="_blank") More info]
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id=form)
        .panel-body(ng-if='ui.isPanelLoaded("#{form}")')
            .col-sm-6
                .settings-row(ng-init='checkpointSpiTbl={type: "checkpointSpi", model: "checkpointSpi", focusId: "kind", ui: "checkpoint-table"}')
                    +ignite-form-group()
                        ignite-form-field-label
                            | Checkpoint SPI configurations
                        ignite-form-group-tooltip
                            | Checkpoint SPI configurations
                        ignite-form-group-add(ng-click='tableNewItem(checkpointSpiTbl)')
                            | Add checkpoint SPI
                        .group-content-empty(ng-if='!(#{model} && #{model}.length > 0)')
                            | Not defined
                        .group-content(ng-show='#{model} && #{model}.length > 0' ng-repeat='checkpoint in #{model} track by $index')
                            hr(ng-if='$index != 0')
                            .settings-row
                                +dropdown-required('Checkpoint SPI:', 'checkpoint.kind', '"checkpointKind" + $index', 'true', 'true', 'Default', '[\
                                        {value: "FS", label: "File System"},\
                                        {value: "Cache", label: "Cache"},\
                                        {value: "S3", label: "Amazon S3"},\
                                        {value: "JDBC", label: "Database"},\
                                        {value: "Custom", label: "Custom"},\
                                        {value: "null", label: "Default"}\
                                    ]',
                                    'Provides an ability to save an intermediate job state\
                                    <ul>\
                                        <li>File System - Uses a shared file system to store checkpoints</li>\
                                        <li>Cache - Uses a cache to store checkpoints</li>\
                                        <li>Amazon S3 - Uses a database to store checkpoints</li>\
                                        <li>Database - Uses Amazon S3 to store checkpoints</li>\
                                        <li>Custom - Custom checkpoint SPI implementation</li>\
                                        <li>Default - No checkpoint SPI configured</li>\
                                    </ul>')

                                    +table-remove-button(model, 'Remove Checkpoint SPI')
                            .settings-row(ng-show=checkpointFs)
                                -var model2 = 'checkpoint.FS.dirPaths'
                                -var form2 = 'checkpointFsPathes'

                                +ignite-form-group(ng-form=form2 ng-model='checkpoint.FS.dirPaths.dirPaths')
                                    -var uniqueTip = 'Such path already exists!'

                                    ignite-form-field-label
                                        | Paths
                                    ignite-form-group-tooltip
                                        | Paths to a shared directory where checkpoints will be stored
                                    ignite-form-group-add(ng-click='(group.add = [{}])')
                                        | Add new path

                                    .group-content(ng-if='checkpoint.FS.dirPaths.length')
                                        -var model3 = 'obj.model';
                                        -var name = '"edit" + $index'
                                        -var valid = form2 + '[' + name + '].$valid'
                                        -var save = 'checkpoint.FS.dirPaths[$index] = ' + model3
                                        div(ng-repeat='model in #{model3} track by $index' ng-init='obj = {}')
                                            label.col-xs-12.col-sm-12.col-md-12
                                                .indexField
                                                    | {{ $index+1 }})
                                                +table-remove-conditional-button(model3, enabled, 'Remove path')
                                                span(ng-hide='field.edit')
                                                    a.labelFormField(ng-click='#{enabled} && (field.edit = true) && (#{model3} = model)') {{ model }}
                                                span(ng-if='field.edit')
                                                    +table-text-field('Path:', name, model3, model3 + '.dirPaths', valid, save, false)
                                                        +table-save-button(valid, save, false)
                                                        +unique-feedback(name, uniqueTip)

                                    .group-content(ng-repeat='field in group.add')
                                        -var model4 = 'new';
                                        -var name = '"new"'
                                        -var valid = form2 + '[' + name + '].$valid'
                                        -var save = 'checkpoint.FS.dirPaths.push(' + model4 + ')'

                                        div
                                            label.col-xs-12.col-sm-12.col-md-12
                                                +table-text-field('Path:', name, model4, model4 + '.dirPaths', valid, save, true)
                                                    +table-save-button(valid, save, true)
                                                    +unique-feedback(name, uniqueTip)

                                    .group-content-empty(ng-if='!(checkpoint.FS.dirPaths.length) && !group.add.length')
                                        | Not defined
                            .settings-row(ng-show=checkpointFs)
                                +java-class('Listener:', 'checkpoint.FS.checkpointListener', '"checkpointFsListener" + $index', 'true', 'false',
                                    'Checkpoint listener implementation class name')
                            .settings-row(ng-show=checkpointCache)
                                +dropdown-required-empty('Cache:', 'checkpoint.Cache.cache', '"checkpointCacheCache"', 'true', checkpointCache,
                                    'Choose cache', 'No caches configured', 'caches', 'Cache to use for storing checkpoints')
                            .settings-row(ng-show=checkpointCache)
                                +java-class('Listener:', 'checkpoint.Cache.checkpointListener', '"checkpointCacheListener" + $index', 'true', 'false',
                                    'Checkpoint listener implementation class name')
                            .settings-row(ng-show=checkpointS3)
                                +dropdown-required('AWS credentials:', 'checkpoint.S3.awsCredentials.kind', '"checkpointS3AwsCredentials"', 'true', 'true', 'Custom', '[\
                                        {value: "Basic", label: "Basic"},\
                                        {value: "Properties", label: "Properties"},\
                                        {value: "Anonymous", label: "Anonymous"},\
                                        {value: "BasicSession", label: "Basic with session"},\
                                        {value: "Custom", label: "Custom"}\
                                    ]',
                                'AWS credentials\
                                <ul>\
                                    <li>Basic - Allows callers to pass in the AWS access key and secret access in the constructor</li>\
                                    <li>Properties - Reads in AWS access keys from a properties file</li>\
                                    <li>Anonymous - Allows use of "anonymous" credentials</li>\
                                    <li>Database - Session credentials with keys and session token</li>\
                                    <li>Custom - Custom AWS credentials provider</li>\
                                </ul>')
                            .panel-details(ng-show=checkpointS3Path)
                                .details-row
                                    +text('Path:', credentialsModel + '.Properties.path', '"checkpointS3PropertiesPath"', checkpointS3Path, 'Input properties file path',
                                        'The file from which to read the AWS credentials properties')
                            .panel-details(ng-show=checkpointS3Custom)
                                .details-row
                                    +java-class('Class name:', credentialsModel + '.Custom.className', '"checkpointS3CustomClassName" + $index', 'true', checkpointS3Custom,
                                        'Custom AWS credentials provider implementation class')
                            .settings-row(ng-show=checkpointS3)
                                +text('Bucket name suffix:', 'checkpoint.S3.bucketNameSuffix', '"checkpointS3BucketNameSuffix"', 'false', 'default-bucket', 'Bucket name suffix')
                            .settings-row(ng-show=checkpointS3)
                                +dropdown('Protocol:', clientCfgModel + '.protocol', '"checkpointS3Protocol"', 'true', 'HTTPS', '[\
                                        {value: "HTTP", label: "HTTP"},\
                                        {value: "HTTPS", label: "HTTPS"}\
                                    ]',
                                'Provides an ability to save an intermediate job state\
                                <ul>\
                                    <li>HTTP - Using the HTTP protocol is less secure than HTTPS, but can slightly reduce\
                                        the system resources used when communicating with AWS</li>\
                                    <li>HTTPS - Using the HTTPS protocol is more secure than using the HTTP protocol, but\
                                        may use slightly more system resources. AWS recommends using HTTPS for maximize security</li>\
                                </ul>')
                            .settings-row(ng-show=checkpointS3)
                                +number('Maximum connections:', clientCfgModel + '.maxConnections', '"checkpointS3MaxConnections"',
                                    'true', '50', '1', 'Maximum number of allowed open HTTP connections')
                            .settings-row(ng-show=checkpointS3)
                                +text('User agent:', clientCfgModel + '.userAgent', '"checkpointS3UserAgent"', 'false', 'System specific header',
                                    'HTTP user agent header to send with all requests')
                            .settings-row(ng-show=checkpointS3)
                                +text-ip-address('Local address:', clientCfgModel + '.localAddress', '"checkpointS3LocalAddress"', 'true', 'Not specified',
                                    'Optionally specifies the local address to bind to')
                            .settings-row(ng-show=checkpointS3)
                                +text('Proxy host:', clientCfgModel + '.proxyHost', '"checkpointS3ProxyHost"', 'false', 'Not specified',
                                    'Optional proxy host the client will connect through')
                            .settings-row(ng-show=checkpointS3)
                                +number('Proxy port:', clientCfgModel + '.proxyPort', '"checkpointS3ProxyPort"', 'true', 'Not specified', '0',
                                    'Optional proxy port the client will connect through')
                            .settings-row(ng-show=checkpointS3)
                                +text('Proxy user:', clientCfgModel + '.proxyUsername', '"checkpointS3ProxyUsername"', 'false', 'Not specified',
                                    'Optional proxy user name to use if connecting through a proxy')
                            .settings-row(ng-show=checkpointS3)
                                +text('Proxy domain:', clientCfgModel + '.proxyDomain', '"checkpointS3ProxyDomain"', 'false', 'Not specified',
                                    'Optional Windows domain name for configuring an NTLM proxy')
                            .settings-row(ng-show=checkpointS3)
                                +text('Proxy workstation:', clientCfgModel + '.proxyWorkstation', '"checkpointS3ProxyWorkstation"', 'false', 'Not specified',
                                    'Optional Windows workstation name for configuring NTLM proxy support')
                            .settings-row(ng-show=checkpointS3)
                                +dropdown('Retry policy:', clientRetryModel + '.kind', '"checkpointS3RetryPolicy"', 'true', 'Default', '[\
                                    {value: "Default", label: "Default SDK retry policy"},\
                                    {value: "DefaultMaxRetries", label: "Default with the specified max retry count"},\
                                    {value: "DynamoDB", label: "Default for DynamoDB client"},\
                                    {value: "DynamoDBMaxRetries", label: "DynamoDB with the specified max retry count"},\
                                    {value: "Custom", label: "Custom configured"}\
                                ]',
                                'Provides an ability to save an intermediate job state\
                                <ul>\
                                    <li>SDK default retry policy - This policy will honor the maxErrorRetry set in ClientConfiguration</li>\
                                    <li>Default with the specified max retry count - Default SDK retry policy with the specified max retry count</li>\
                                    <li>Default for DynamoDB client - This policy will honor the maxErrorRetry set in ClientConfiguration</li>\
                                    <li>DynamoDB with the specified max retry count - This policy will honor the maxErrorRetry set in ClientConfiguration with the specified max retry count</li>\
                                    <li>Custom configured - Custom configured SDK retry policy</li>\
                                </ul>')
                            .panel-details(ng-show=checkpointS3 + ' && ' + clientRetryModel + '.kind === "DefaultMaxRetries"')
                                .details-row
                                    +number('Maximum retry attempts:', clientRetryModel + '.DefaultMaxRetries.maxErrorRetry', '"checkpointS3DefaultMaxErrorRetry"', 'true', '-1', '1',
                                        'Maximum number of retry attempts for failed requests')
                            .panel-details(ng-show=checkpointS3 + ' && ' + clientRetryModel + '.kind === "DynamoDBMaxRetries"')
                                .details-row
                                    +number('Maximum retry attempts:', clientRetryModel + '.DynamoDBMaxRetries.maxErrorRetry', '"checkpointS3DynamoDBMaxErrorRetry"', 'true', '-1', '1',
                                        'Maximum number of retry attempts for failed requests')
                            .panel-details(ng-show=checkpointS3 + ' && ' + clientRetryModel + '.kind === "Custom"')
                                .details-row
                                    +java-class('Retry condition:', clientRetryModel + '.Custom.retryCondition', '"checkpointS3CustomRetryPolicy" + $index', 'true', 'false',
                                        'Retry condition on whether a specific request and exception should be retried')
                                .details-row
                                    +java-class('Backoff strategy:', clientRetryModel + '.Custom.backoffStrategy', '"checkpointS3CustomBackoffStrategy" + $index', 'true', 'false',
                                        'Back-off strategy for controlling how long the next retry should wait')
                                .details-row
                                    +number('Maximum retry attempts:', clientRetryModel + '.Custom.maxErrorRetry', '"checkpointS3CustomMaxErrorRetry"', 'true', '-1', '1',
                                        'Maximum number of retry attempts for failed requests')
                                .details-row
                                    +checkbox('Honor the max error retry set', clientRetryModel + '.Custom.honorMaxErrorRetryInClientConfig', '"checkpointS3CustomHonorMaxErrorRetryInClientConfig"',
                                        'Whether this retry policy should honor the max error retry set by ClientConfiguration#setMaxErrorRetry(int)')
                            .settings-row(ng-show=checkpointS3)
                                +number('Maximum retry attempts:', clientCfgModel + '.maxErrorRetry', '"checkpointS3MaxErrorRetry"', 'true', '-1', '0',
                                    'Maximum number of retry attempts for failed retryable requests')
                            .settings-row(ng-show=checkpointS3)
                                +number('Socket timeout:', clientCfgModel + '.socketTimeout', '"checkpointS3SocketTimeout"', 'true', '50000', '0',
                                    'Amount of time in milliseconds to wait for data to be transfered over an established, open connection before the connection times out and is closed<br/>\
                                    A value of <b>0</b> means infinity')
                            .settings-row(ng-show=checkpointS3)
                                +number('Connection timeout:', clientCfgModel + '.connectionTimeout', '"checkpointS3ConnectionTimeout"', 'true', '50000', '0',
                                    'Amount of time in milliseconds to wait when initially establishing a connection before giving up and timing out<br/>\
                                    A value of 0 means infinity')
                            .settings-row(ng-show=checkpointS3)
                                +number('Request timeout:', clientCfgModel + '.requestTimeout', '"checkpointS3RequestTimeout"', 'true', '0', '-1',
                                    'Amount of time in milliseconds to wait for the request to complete before giving up and timing out<br/>\
                                    A non - positive value means infinity')
                            .settings-row(ng-show=checkpointS3)
                                +text('Signature algorithm:', clientCfgModel + '.signerOverride', '"checkpointS3SignerOverride"', 'false', 'Not specified',
                                    'Name of the signature algorithm to use for signing requests made by this client')
                            .settings-row(ng-show=checkpointS3)
                                +number('Connection TTL:', clientCfgModel + '.connectionTTL', '"checkpointS3ConnectionTTL"', 'true', '-1', '-1',
                                    'Expiration time in milliseconds for a connection in the connection pool<br/>\
                                    By default, it is set to <b>-1</b>, i.e. connections do not expire')
                            .settings-row(ng-show=checkpointS3)
                                +number('Idle timeout:', clientCfgModel + '.connectionMaxIdleMillis', '"checkpointS3ConnectionMaxIdleMillis"', 'true', '60000', '0',
                                    'Maximum amount of time that an idle connection may sit in the connection pool and still be eligible for reuse')
                            .settings-row(ng-show=checkpointS3)
                                +java-class('DNS resolver:', clientCfgModel + '.dnsResolver', '"checkpointS3DnsResolver" + $index', 'true', 'false',
                                    'DNS Resolver that should be used to for resolving AWS IP addresses')
                            .settings-row(ng-show=checkpointS3)
                                +number('Response metadata cache size:', clientCfgModel + '.responseMetadataCacheSize', '"checkpointS3ResponseMetadataCacheSize"', 'true', '50', '0',
                                    'Response metadata cache size')
                            .settings-row(ng-show=checkpointS3)
                                +java-class('SecureRandom class name:', clientCfgModel + '.secureRandom', '"checkpointS3SecureRandom" + $index', 'true', 'false',
                                    'SecureRandom to be used by the SDK class name')
                            .settings-row(ng-show=checkpointS3)
                                +checkbox('Use reaper', clientCfgModel + '.useReaper', '"checkpointS3UseReaper"', 'Checks if the IdleConnectionReaper is to be started')
                            .settings-row(ng-show=checkpointS3)
                                +checkbox('Use GZIP', clientCfgModel + '.useGzip', '"checkpointS3UseGzip"', 'Checks if gzip compression is used')
                            .settings-row(ng-show=checkpointS3)
                                +checkbox('Preemptively basic authentication', clientCfgModel + '.preemptiveBasicProxyAuth', '"checkpointS3PreemptiveBasicProxyAuth"',
                                    'Attempt to authenticate preemptively against proxy servers using basic authentication')
                            .settings-row(ng-show=checkpointS3)
                                +checkbox('TCP KeepAlive', clientCfgModel + '.useTcpKeepAlive', '"checkpointS3UseTcpKeepAlive"', 'TCP KeepAlive support is enabled')
                            .settings-row(ng-show=checkpointS3)
                                +java-class('Listener:', 'checkpoint.S3.checkpointListener', '"checkpointS3Listener" + $index', 'true', 'false',
                                    'Checkpoint listener implementation class name')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Data source bean name:', 'checkpoint.JDBC.dataSourceBean', '"checkpointJdbcDataSourceBean"', checkpointJDBC, 'Input bean name',
                                    'Name of the data source bean in Spring context')
                            .settings-row(ng-show=checkpointJDBC)
                                +dialect('Dialect:', 'checkpoint.JDBC.dialect', '"checkpointJdbcDialect"', checkpointJDBC,
                                    'Dialect of SQL implemented by a particular RDBMS:', 'Generic JDBC dialect', 'Choose JDBC dialect')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Table name:', 'checkpoint.JDBC.checkpointTableName', '"checkpointJdbcCheckpointTableName"', 'false', 'CHECKPOINTS', 'Checkpoint table name')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Key field name:', 'checkpoint.JDBC.keyFieldName', '"checkpointJdbcKeyFieldName"', 'false', 'NAME', 'Checkpoint key field name')
                            .settings-row(ng-show=checkpointJDBC)
                                +dropdown('Key field type:', 'checkpoint.JDBC.keyFieldType', '"checkpointJdbcKeyFieldType"', 'true', 'VARCHAR', 'supportedJdbcTypes', 'Checkpoint key field type')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Value field name:', 'checkpoint.JDBC.valueFieldName', '"checkpointJdbcValueFieldName"', 'false', 'VALUE', 'Checkpoint value field name')
                            .settings-row(ng-show=checkpointJDBC)
                                +dropdown('Value field type:', 'checkpoint.JDBC.valueFieldType', '"checkpointJdbcValueFieldType"', 'true', 'BLOB', 'supportedJdbcTypes', 'Checkpoint value field type')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Expire date field name:', 'checkpoint.JDBC.expireDateFieldName', '"checkpointJdbcExpireDateFieldName"', 'false', 'EXPIRE_DATE', 'Checkpoint expire date field name')
                            .settings-row(ng-show=checkpointJDBC)
                                +dropdown('Expire date field type:', 'checkpoint.JDBC.expireDateFieldType', '"checkpointJdbcExpireDateFieldType"', 'true', 'DATETIME', 'supportedJdbcTypes', 'Checkpoint expire date field type')
                            .settings-row(ng-show=checkpointJDBC)
                                +number('Number of retries:', 'checkpoint.JDBC.numberOfRetries', '"checkpointJdbcNumberOfRetries"', 'true', '2', '0', 'Number of retries in case of DB failure')
                            .settings-row(ng-show=checkpointJDBC)
                                +java-class('Listener:', 'checkpoint.JDBC.checkpointListener', '"checkpointJdbcListener" + $index', 'true', 'false',
                                    'Checkpoint listener implementation class name')
                            .settings-row(ng-show=checkpointCustom)
                                +java-class('Class name:', 'checkpoint.Custom.className', '"checkpointCustomClassName" + $index', 'true', checkpointCustom,
                                    'Custom CheckpointSpi implementation class')
            .col-sm-6
                +preview(model, 'clusterCheckpoint')
