//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include ../../../../../app/helpers/jade/mixins.jade

-var form = 'checkpoint'
-var model = 'backupItem.checkpointSpi'
-var checkpointFs = 'checkpoint.kind === "FS"'
-var checkpointCache = 'checkpoint.kind === "Cache"'
-var checkpointS3 = 'checkpoint.kind === "S3"'
-var checkpointJDBC = 'checkpoint.kind === "JDBC"'
-var checkpointCustom = 'checkpoint.kind === "Custom"'

.panel.panel-default(ng-form=form novalidate)
    .panel-heading(bs-collapse-toggle ng-click='ui.loadPanel("#{form}")')
        ignite-form-panel-chevron
        label Checkpointing
        ignite-form-field-tooltip.tipLabel
            | Checkpointing provides an ability to save an intermediate job state#[br]
            | #[a(href="http://apacheignite.gridgain.org/docs/checkpointing" target="_blank") More info]
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id=form)
        .panel-body(ng-if='ui.isPanelLoaded("#{form}")')
            .col-sm-6
                .settings-row(ng-init='checkpointSpiTbl={type: "checkpointSpi", model: "checkpointSpi", focusId: "kind", ui: "checkpoint-table"}')
                    +ignite-form-group()
                        ignite-form-field-label
                            | Checkpoint SPI configurations
                        ignite-form-group-tooltip
                            | Checkpoint SPI configurations
                        ignite-form-group-add(ng-click='tableNewItem(checkpointSpiTbl)')
                            | Add checkpoint SPI
                        .group-content-empty(ng-if='!(#{model} && #{model}.length > 0)')
                            | Not defined
                        .group-content(ng-show='#{model} && #{model}.length > 0' ng-repeat='checkpoint in #{model} track by $index')
                            hr(ng-if='$index != 0')
                            .settings-row
                                //(lbl, model, name, enabled, placeholder, options, tip)
                                +dropdown-required('Checkpoint SPI:', 'checkpoint.kind', '"checkpointKind" + $index', 'true', 'true', 'Default', '[\
                                        {value: "FS", label: "File System"},\
                                        {value: "Cache", label: "Cache"},\
                                        {value: "S3", label: "Amazon S3"},\
                                        {value: "JDBC", label: "Database"},\
                                        {value: "Custom", label: "Custom"},\
                                        {value: "null", label: "Default"}\
                                    ]',
                                    'Provides an ability to save an intermediate job state\
                                    <ul>\
                                        <li>File System - Uses a shared file system to store checkpoints</li>\
                                        <li>Cache - Uses a cache to store checkpoints</li>\
                                        <li>Amazon S3 - Uses a database to store checkpoints</li>\
                                        <li>Database - Uses Amazon S3 to store checkpoints</li>\
                                        <li>Custom - Custom checkpoint SPI implementation</li>\
                                        <li>Default - No checkpoint SPI configured</li>\
                                    </ul>')

                                    +table-remove-button(model, 'Remove Checkpoint SPI')
                            .settings-row(ng-show=checkpointFs)
                                -var model2 = 'checkpoint.FS.dirPaths'
                                -var form2 = 'checkpointFsPathes'

                                +ignite-form-group(ng-form=form2 ng-model=model2 + '.dirPaths')
                                    -var uniqueTip = 'Such path already exists!'

                                    ignite-form-field-label
                                        | Paths
                                    ignite-form-group-tooltip
                                        | Paths to a shared directory where checkpoints will be stored
                                    ignite-form-group-add(ng-click='(group.add = [{}])')
                                        | Add new path

                                    .group-content(ng-if='#{model2}.length')
                                        -var model3 = 'obj.model';
                                        -var name = '"edit" + $index'
                                        -var valid = form2 + '[' + name + '].$valid'
                                        -var save = model3 + '[$index] = ' + model3
                                        div(ng-repeat='model in #{model3} track by $index' ng-init='obj = {}')
                                            label.col-xs-12.col-sm-12.col-md-12
                                                .indexField
                                                    | {{ $index+1 }})
                                                +table-remove-conditional-button(model3, enabled, 'Remove path')
                                                span(ng-hide='field.edit')
                                                    a.labelFormField(ng-click='#{enabled} && (field.edit = true) && (#{model3} = model)') {{ model }}
                                                span(ng-if='field.edit')
                                                    // (name, model, items, valid, save, placeholder, newItem)
                                                    +table-text-field('Path:', name, model3, model3 + '.dirPaths', valid, save, false)
                                                        +table-save-button(valid, save, false)
                                                        +unique-feedback(name, uniqueTip)

                                    .group-content(ng-repeat='field in group.add')
                                        -var model4 = 'new';
                                        -var name = '"new"'
                                        -var valid = form2 + '[' + name + '].$valid'
                                        -var save = model4 + '.push(' + model4 + ')'

                                        div
                                            label.col-xs-12.col-sm-12.col-md-12
                                                //(name, model, items, valid, save, placeholder, newItem)
                                                +table-text-field('Path:', name, model4, model4 + '.dirPaths', valid, save, true)
                                                    +table-save-button(valid, save, true)
                                                    +unique-feedback(name, uniqueTip)

                                    .group-content-empty(ng-if='!(#{model2}.length) && !group.add.length')
                                        | Not defined
                            .settings-row(ng-show=checkpointFs)
                                +java-class('Listener:', model + '.FS.checkpointListener', '"checkpointFsListener" + $index', 'true', 'false',
                                    'Checkpoint listener implementation class name')
                            .settings-row(ng-show=checkpointCache)
                                // lbl, model, name, enabled, required, placeholder, options, tip
                                +dropdown-required-empty('Cache:', model + '.Cache.cache', '"checkpointCacheCache"', 'true', checkpointCache,
                                    'Choose cache', 'No caches configured', 'caches', 'Cache to use for storing checkpoints')
                            .settings-row(ng-show=checkpointCache)
                                +java-class('Listener:', model + '.Cache.checkpointListener', '"checkpointCacheListener" + $index', 'true', 'false',
                                    'Checkpoint listener implementation class name')

                            // TODO S3

                            .settings-row(ng-show=checkpointJDBC)
                                +text('Data source bean name:', model + '.JDBC.dataSourceBean', '"checkpointJdbcDataSourceBean"', checkpointJDBC, 'Input bean name',
                                    'Name of the data source bean in Spring context')
                            .settings-row(ng-show=checkpointJDBC)
                                +dialect('Dialect:', model + '.JDBC.dialect', '"checkpointJdbcDialect"', checkpointJDBC,
                                    'Dialect of SQL implemented by a particular RDBMS:', 'Generic JDBC dialect', 'Choose JDBC dialect')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Table name:', model + '.JDBC.checkpointTableName', '"checkpointJdbcCheckpointTableName"', 'false', 'CHECKPOINTS', 'Checkpoint table name')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Key field name:', model + '.JDBC.keyFieldName', '"checkpointJdbcKeyFieldName"', 'false', 'NAME', 'Checkpoint key field name')
                            .settings-row(ng-show=checkpointJDBC)
                                +dropdown('Key field type:', model + '.JDBC.keyFieldType', '"checkpointJdbcKeyFieldType"', 'true', 'VARCHAR', 'supportedJdbcTypes', 'Checkpoint key field type')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Value field name:', model + '.JDBC.valueFieldName', '"checkpointJdbcValueFieldName"', 'false', 'VALUE', 'Checkpoint value field name')
                            .settings-row(ng-show=checkpointJDBC)
                                +dropdown('Value field type:', model + '.JDBC.valueFieldType', '"checkpointJdbcValueFieldType"', 'true', 'BLOB', 'supportedJdbcTypes', 'Checkpoint value field type')
                            .settings-row(ng-show=checkpointJDBC)
                                +text('Expire date field name:', model + '.JDBC.expireDateFieldName', '"checkpointJdbcExpireDateFieldName"', 'false', 'EXPIRE_DATE', 'Checkpoint expire date field name')
                            .settings-row(ng-show=checkpointJDBC)
                                +dropdown('Expire date field type:', model + '.JDBC.expireDateFieldType', '"checkpointJdbcExpireDateFieldType"', 'true', 'DATETIME', 'supportedJdbcTypes', 'Checkpoint expire date field type')
                            .settings-row(ng-show=checkpointJDBC)
                                +number('Number of retries:', model + '.JDBC.numberOfRetries', '"checkpointJdbcNumberOfRetries"', 'true', '2', '0', 'Number of retries in case of DB failure')
                            .settings-row(ng-show=checkpointJDBC)
                                +java-class('Listener:', model + '.JDBC.checkpointListener', '"checkpointJdbcListener" + $index', 'true', 'false',
                                    'Checkpoint listener implementation class name')
                            .settings-row(ng-show=checkpointCustom)
                                +java-class('Class name:', model + '.Custom.className', '"checkpointCustomClassName" + $index', 'true', checkpointCustom,
                                    'Custom CheckpointSpi implementation class')
            .col-sm-6
                +preview(model, 'clusterCheckpoint')
